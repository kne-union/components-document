{"version":3,"file":"static/js/2589.2521d29f.chunk.js","mappings":"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","sources":["../node_modules/markdown-it-task-lists/index.js"],"sourcesContent":["// Markdown-it plugin to render GitHub-style task lists; see\n//\n// https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments\n// https://github.com/blog/1825-task-lists-in-all-markdown-documents\n\nvar disableCheckboxes = true;\nvar useLabelWrapper = false;\nvar useLabelAfter = false;\n\nmodule.exports = function(md, options) {\n\tif (options) {\n\t\tdisableCheckboxes = !options.enabled;\n\t\tuseLabelWrapper = !!options.label;\n\t\tuseLabelAfter = !!options.labelAfter;\n\t}\n\n\tmd.core.ruler.after('inline', 'github-task-lists', function(state) {\n\t\tvar tokens = state.tokens;\n\t\tfor (var i = 2; i < tokens.length; i++) {\n\t\t\tif (isTodoItem(tokens, i)) {\n\t\t\t\ttodoify(tokens[i], state.Token);\n\t\t\t\tattrSet(tokens[i-2], 'class', 'task-list-item' + (!disableCheckboxes ? ' enabled' : ''));\n\t\t\t\tattrSet(tokens[parentToken(tokens, i-2)], 'class', 'contains-task-list');\n\t\t\t}\n\t\t}\n\t});\n};\n\nfunction attrSet(token, name, value) {\n\tvar index = token.attrIndex(name);\n\tvar attr = [name, value];\n\n\tif (index < 0) {\n\t\ttoken.attrPush(attr);\n\t} else {\n\t\ttoken.attrs[index] = attr;\n\t}\n}\n\nfunction parentToken(tokens, index) {\n\tvar targetLevel = tokens[index].level - 1;\n\tfor (var i = index - 1; i >= 0; i--) {\n\t\tif (tokens[i].level === targetLevel) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\nfunction isTodoItem(tokens, index) {\n\treturn isInline(tokens[index]) &&\n\t       isParagraph(tokens[index - 1]) &&\n\t       isListItem(tokens[index - 2]) &&\n\t       startsWithTodoMarkdown(tokens[index]);\n}\n\nfunction todoify(token, TokenConstructor) {\n\ttoken.children.unshift(makeCheckbox(token, TokenConstructor));\n\ttoken.children[1].content = token.children[1].content.slice(3);\n\ttoken.content = token.content.slice(3);\n\n\tif (useLabelWrapper) {\n\t\tif (useLabelAfter) {\n\t\t\ttoken.children.pop();\n\n\t\t\t// Use large random number as id property of the checkbox.\n\t\t\tvar id = 'task-item-' + Math.ceil(Math.random() * (10000 * 1000) - 1000);\n\t\t\ttoken.children[0].content = token.children[0].content.slice(0, -1) + ' id=\"' + id + '\">';\n\t\t\ttoken.children.push(afterLabel(token.content, id, TokenConstructor));\n\t\t} else {\n\t\t\ttoken.children.unshift(beginLabel(TokenConstructor));\n\t\t\ttoken.children.push(endLabel(TokenConstructor));\n\t\t}\n\t}\n}\n\nfunction makeCheckbox(token, TokenConstructor) {\n\tvar checkbox = new TokenConstructor('html_inline', '', 0);\n\tvar disabledAttr = disableCheckboxes ? ' disabled=\"\" ' : '';\n\tif (token.content.indexOf('[ ] ') === 0) {\n\t\tcheckbox.content = '<input class=\"task-list-item-checkbox\"' + disabledAttr + 'type=\"checkbox\">';\n\t} else if (token.content.indexOf('[x] ') === 0 || token.content.indexOf('[X] ') === 0) {\n\t\tcheckbox.content = '<input class=\"task-list-item-checkbox\" checked=\"\"' + disabledAttr + 'type=\"checkbox\">';\n\t}\n\treturn checkbox;\n}\n\n// these next two functions are kind of hacky; probably should really be a\n// true block-level token with .tag=='label'\nfunction beginLabel(TokenConstructor) {\n\tvar token = new TokenConstructor('html_inline', '', 0);\n\ttoken.content = '<label>';\n\treturn token;\n}\n\nfunction endLabel(TokenConstructor) {\n\tvar token = new TokenConstructor('html_inline', '', 0);\n\ttoken.content = '</label>';\n\treturn token;\n}\n\nfunction afterLabel(content, id, TokenConstructor) {\n\tvar token = new TokenConstructor('html_inline', '', 0);\n\ttoken.content = '<label class=\"task-list-item-label\" for=\"' + id + '\">' + content + '</label>';\n\ttoken.attrs = [{for: id}];\n\treturn token;\n}\n\nfunction isInline(token) { return token.type === 'inline'; }\nfunction isParagraph(token) { return token.type === 'paragraph_open'; }\nfunction isListItem(token) { return token.type === 'list_item_open'; }\n\nfunction startsWithTodoMarkdown(token) {\n\t// leading whitespace in a list item is already trimmed off by markdown-it\n\treturn token.content.indexOf('[ ] ') === 0 || token.content.indexOf('[x] ') === 0 || token.content.indexOf('[X] ') === 0;\n}\n"],"names":["disableCheckboxes","useLabelWrapper","useLabelAfter","attrSet","token","name","value","index","attrIndex","attr","attrPush","attrs","parentToken","tokens","targetLevel","level","i","isTodoItem","type","isParagraph","isListItem","content","indexOf","startsWithTodoMarkdown","todoify","TokenConstructor","children","unshift","checkbox","disabledAttr","makeCheckbox","slice","pop","id","Math","ceil","random","push","for","afterLabel","beginLabel","endLabel","module","exports","md","options","enabled","label","labelAfter","core","ruler","after","state","length","Token"],"sourceRoot":""}